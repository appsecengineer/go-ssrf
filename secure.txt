package main

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net"
	"net/http"
	"syscall"
	"time"
)

type CheckURL struct {
	Name string `json:"name"`
	URL  string `json:"url"`
}

type Response struct {
	Name    string `json:"name"`
	Content string `json:"content"`
}

func main() {
	http.HandleFunc("/check", requestHandler)

	http.ListenAndServe(":8080", nil)
}

func secureSocketControl(network string, address string, conn syscall.RawConn) error {
	if !(network == "tcp4" || network == "tcp6") {
		return fmt.Errorf("%s is not a safe network type", network)
	}

	host, port, err := net.SplitHostPort(address)
	if err != nil {
		return fmt.Errorf("%s is not a valid host/port pair: %s", address, err)
	}

	ipaddress := net.ParseIP(host)

	if ipaddress == nil {
		return fmt.Errorf("%s is not a valid IP address", ipaddress)
	}

	if !isPublicIPAddress(ipaddress) {
		return fmt.Errorf("%s is not a public IP address", ipaddress)
	}

	if !(port == "80" || port == "443") {
		return fmt.Errorf("%s is not a valid port number", port)
	}

	return nil
}

func requestHandler(w http.ResponseWriter, r *http.Request) {

	safeDialer := &net.Dialer{
		Timeout:   30 * time.Second,
		KeepAlive: 30 * time.Second,
		DualStack: true,
		Control:   secureSocketControl,
	}

	safeTransport := &http.Transport{
		Proxy:                 http.ProxyFromEnvironment,
		DialContext:           safeDialer.DialContext,
		ForceAttemptHTTP2:     true,
		MaxIdleConns:          100,
		IdleConnTimeout:       90 * time.Second,
		TLSHandshakeTimeout:   10 * time.Second,
		ExpectContinueTimeout: 1 * time.Second,
	}

	safeClient := &http.Client{
		Transport: safeTransport,
	}

	var c CheckURL

	err := json.NewDecoder(r.Body).Decode(&c)

	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
	}

	resp, err := safeClient.Get(c.URL)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
	}

	base64Content := base64.StdEncoding.EncodeToString(body)
	res1 := &Response{
		Name:    c.Name,
		Content: base64Content,
	}
	resJson, _ := json.Marshal(res1)
	w.WriteHeader(http.StatusOK)
	w.Write(resJson)

}
